;@com.wudsn.ide.asm.hardware=APPLE2 
; ACME
; HGR Scrolltext
; by fenarinarsa 2019
;
;This file is part of Latecomer.
;
;    Latecomer is free software: you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation, either version 3 of the License, or
;    (at your option) any later version.
;
;    Latecomer is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License
;    along with Latecomer.  If not, see <https://www.gnu.org/licenses/>.
;

!cpu 65c02
;-----------------------------------------------------------------------
; SCROLLTEXT - INIT
;-----------------------------------------------------------------------

newscroll_init	
	+set_ptr text,text_ptr
	+set_ptr font_lo,ptr1
	+set_ptr font_hi,ptr2
	lda courbe
	sta scroll_y1
	sta scroll_y2
	
	stz courbe_step

	lda #4
	sta scroll_step
	; init pointeurs scrolltext
	+set_ptr scroll_buffer1,scroll_ptr1
	+set_ptr scroll_buffer1_end,scroll_ptr1end
	+set_ptr scroll_buffer2,scroll_ptr2
	+set_ptr scroll_buffer2_end,scroll_ptr2end
	lda #41				; nb steps for buffer1 loop
	sta scroll_step1
	lda #41				; nb steps for buffer2 loop
	sta scroll_step2

	; clear buffer	
	ldy #0
	lda #0
.clear
	sta scroll_buffer1,y
	sta scroll_buffer1+(256*1),y
	sta scroll_buffer1+(256*2),y
	sta scroll_buffer1+(256*3),y
	sta scroll_buffer1+(256*4),y
	sta scroll_buffer1+(256*5),y
	sta scroll_buffer1+(256*6),y
	sta scroll_buffer1+(256*7),y
	sta scroll_buffer1+(256*8),y
	dey
	bne .clear
	ldy #$30+28
.clear2
	sta scroll_buffer1+(256*9)-1,y
	dey
	bne .clear2
			
.end	stz vbl_swaphgr
	stz current_GRpage
	rts


;-----------------------------------------------------------------------
; SCROLLTEXT - PAGE1
;
; using circular buffer
;-----------------------------------------------------------------------

newscroll_hgr1	
	!zone
	; buffer1
	; step 1 - writing new char on pos 0 and copy it on end pos
	ldx #1
	lda scroll_step
	lsr
	lsr
	bcs .right_side
.left_side
	;jsr	new_char
	ldx #0
.right_side
	ldy #0
	!for i,0,13 {
	lda scroll_char_buffer+(i*2),x
	sta (scroll_ptr1),y
	sta (scroll_ptr1end),y
	iny
	}
	
	; step 2 - increment buffer pointers
	lda scroll_step1
	dec
	beq .loopscroll
	sta scroll_step1

	+add8to16 14,scroll_ptr1
	+add8to16 14,scroll_ptr1end
	jmp	scroll_copy_hgr1

.loopscroll
	; reset to start of buffer (wrap)
	lda #41				; nb steps for buffer1 loop
	sta scroll_step1
	+set_ptr	scroll_buffer1,scroll_ptr1
	+set_ptr	scroll_buffer1_end,scroll_ptr1end
	jmp scroll_copy_hgr1
	

;-----------------------------------------------------------------------
; SCROLLTEXT - PAGE2
;
; using circular buffer
;-----------------------------------------------------------------------

newscroll_hgr2	
	!zone
	; buffer2
	; step 1 - writing new char on pos 0 and copy it on end pos
	lda scroll_step
	lsr
	lsr
	bcc .left_side
	jmp .right_side
.left_side
	ldy #0
	; copy the leftover of the current char (far right side) with a >>3
	!for i,0,13 {
	lda scroll_char_buffer+(i*2)+1
	lsr
	lsr
	lsr
	sta (scroll_ptr2),y
	iny
	}
	; pull the new char into char buffer
	jsr	new_char
	; OR the far left side of the new char<<4 with the previous result
	ldy #0
	!for i,0,13 {
	lda scroll_char_buffer+(i*2)
	rol
	rol
	rol
	rol
	and #%01110000
	ora (scroll_ptr2),y
	sta (scroll_ptr2),y
	sta (scroll_ptr2end),y
	iny
	}
	jmp .char_done
	
.right_side
	; take the middle of current char >>3 and put it in the buffer
	ldy #0
	!for i,0,13 {
	lda scroll_char_buffer+(i*2)
	lsr
	lsr
	lsr
	sta (scroll_ptr2),y
	lda scroll_char_buffer+(i*2)+1
	rol
	rol
	rol
	rol
	and #%01110000
	ora (scroll_ptr2),y
	sta (scroll_ptr2),y	
	sta (scroll_ptr2end),y
	iny
	}

.char_done	
	; step 2 - increment buffer pointers
	lda scroll_step2
	dec
	beq .loopscroll
	sta scroll_step2

	+add8to16 14,scroll_ptr2
	+add8to16 14,scroll_ptr2end
	jmp	scroll_copy_hgr2

.loopscroll
	; reset to start of buffer (wrap)
	lda #41				; nb steps for buffer1 loop
	sta scroll_step2
	+set_ptr	scroll_buffer2,scroll_ptr2
	+set_ptr	scroll_buffer2_end,scroll_ptr2end
	jmp	scroll_copy_hgr2



;-----------------------------------------------------------------------
; SCROLLTEXT - CHANGE POSITION
; + clear previous scroll
;
; find the new Y position
;-----------------------------------------------------------------------

	!zone
	
	; init and clear

newscroll_set_position_hgr1	
	+modify	clear_line_hgr1,.clear_rout
	lda #scroll_y1
	sta .m2+1			; change to current Y pointer
	lda scroll_y1
	bra .go
	
newscroll_set_position_hgr2	
	+modify	clear_line_hgr2,.clear_rout
	lda #scroll_y2
	sta .m2+1			; change to current Y pointer
	lda scroll_y2

.go	sta .mstart+1		; store old Y position
	clc
	adc #14
	sta .mfinal+1		; twice

	lda #80
	ldx scroll_bounce
	beq .notextbounce

	; bouncing wave
	ldx courbe_step
	inx
	lda courbe,x
	cmp #$ff
	bne .pasfini
	lda courbe		; go back to the first value
	ldx #1
.pasfini
	stx courbe_step
	
	; no bounce
.notextbounce	
	;lda #80

	; A=new scroll pos
	cmp .mstart+1
.m2	sta scroll_y1	; save new Y pos
	bne .ychanged
	rts
	; position has changed
.ychanged
	bcc .smaller
.larger
	; we're going down, end clear is at current position
	sta .mfinal+1
	bra .clear_the_mess	

.smaller
	; we're going up, start clear is below current position
	clc
	adc #14
	sta .mstart+1

.clear_the_mess
.mstart
	ldx #100	; start pos

.loop
.clear_rout
	jsr clear_line_hgr1
	inx
.mfinal	cpx	#$ff	; final pos
	bne .loop

.end
	rts	

;-----------------------------------------------------------------------
; SCROLLTEXT - SCROLL COPY HGR
;
; copy from loop buffer to HGR page
;-----------------------------------------------------------------------

scroll_hgr_lines_lut = ptr4

!zone
scroll_copy_hgr1
	+set_ptr HGR_LINES_P1_HI,scroll_hgr_lines_lut
	+mov16	scroll_ptr1,scroll_ptr
	ldy scroll_y1
	bra .go

scroll_copy_hgr2
	+set_ptr HGR_LINES_P2_HI,scroll_hgr_lines_lut
	+mov16 scroll_ptr2,scroll_ptr
	ldy scroll_y2
	
.go	; modify copy code
	!for i,0,13 { 
	lda HGR_LINES_LO,y
	sta .loopcopy+5+(6*i)
	lda (scroll_hgr_lines_lut),y
	sta .loopcopy+6+(6*i)
	iny
	}

	ldx #0
.loopcopy
	ldy #0
	!for i,0,13 {			; for each line
	lda (scroll_ptr),y    	; take byte of character /5+/4+
	sta $2000,x    		   	; copy on screen on line x (self-modified)
	iny						; next byte in character
	}
	+add8to16 14,scroll_ptr
	inx						; next byte in line
	txa
	cmp #40
	beq .endcopy
	jmp .loopcopy
.endcopy
	rts

;-----------------------------------------------------------------------
; SCROLLTEXT - NEW CHAR
;
; copy the current char in the scroll_char_buffer
; and handles text pointer
;-----------------------------------------------------------------------	
	
new_char
	!zone
	lda (text_ptr)
	cmp #-1
	bne .nowrap
	+set_ptr text,text_ptr
	bra new_char
.nowrap
	cmp #'b'  ; start bounce command
	bne .nocommand
	inc scroll_bounce ; enable bounce
	lda #$80	; to avoid too much cleaning make sure the archives positions are okay
	sta scroll_y1
	sta scroll_y2
	+inc16 text_ptr
	bra new_char
.nocommand
	sec
	sbc #$A0
	tax
	lda font_lo,x
	sta .m1+1
	sta .m2+1
	lda font_hi,x
	sta .m1+2
	sta .m2+2
	
	+inc16 text_ptr
	
	ldx #27
.copy
.m1	lda $FFFF,x    ; modified
	sta scroll_char_buffer,x
	dex
	bne .copy
.m2	lda $FFFF,x    ; modified
	sta scroll_char_buffer,x
	rts
	
     
; font is located at $D400

font_lo  !byte $0,$60,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$44,$0,$C,$0,$F0,$F4,$10,$2C,$48,$64,$80,$9C,$B8,$D4,$28,$0,$0,$0,$0,$0,$0,$1C,$38,$54,$70,$8C,$A8,$C4,$E0,$FC,$18,$34,$50,$6C,$88,$A4,$C0,$DC,$F8,$14,$30,$4C,$68,$84,$A0,$BC,$D8,$0,$0,$0,$0,$0
font_hi  !byte $D4,$D8,$D4,$D4,$D4,$D4,$D4,$D4,$D4,$D4,$D4,$D4,$D8,$D4,$D8,$D4,$D7,$D6,$D7,$D7,$D7,$D7,$D7,$D7,$D7,$D7,$D8,$D4,$D4,$D4,$D4,$D4,$D4,$D4,$D4,$D4,$D4,$D4,$D4,$D4,$D4,$D4,$D5,$D5,$D5,$D5,$D5,$D5,$D5,$D5,$D5,$D6,$D6,$D6,$D6,$D6,$D6,$D6,$D6,$D4,$D4,$D4,$D4,$D4


courbe	!byte $90-40,$8F-40,$89-40,$84-40,$7E-40,$79-40,$74-40,$70-40,$6C-40,$69-40,$67-40,$65-40,$64-40,$64-40,$64-40,$65-40,$67-40,$6A-40,$6D-40,$71-40,$75-40,$7A-40,$80-40,$85-40,$8B-40,-1


text
	!text " THIS IS DEFINITIVELY WHAT THE APPLE II PLATFORM NEEDED AFTER 42 YEARS... "
	!text " THANKS TO OUR TEAM OF ENGINEERS, WE CAN NOW CONFIRM THE APPLE II IS FIT TO WELCOME YOU ALL! PLEASE DROP YOUR BEERS AND POUR YOUR FEELS INTO THIS GOOD OLD 6502 ONCE AGAIN         "
	!text "                      b IF YOU DO NOT COME TO THE DEMOSCENE, THE DEMOSCENE COMES FOR YOU!                                            "
	!byte -1
 

